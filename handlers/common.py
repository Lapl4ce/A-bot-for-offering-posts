from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import logging

from config import ADMIN_IDS
from database import Database
from keyboards import get_main_keyboard

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command for new and existing users"""
    try:
        # Add/update user in database
        Database.add_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        
        # Check if user is admin and update role if needed
        if message.from_user.id in ADMIN_IDS:
            Database.update_user(
                telegram_id=message.from_user.id,
                updates={"role": "admin"}
            )

        welcome_message = (
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç–æ–Ω—É—Ç—É—é –ø—Ä–µ–¥–ª–æ–∂–∫—É!*\n\n"
            "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            "üì§ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç - —Å–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
            "üì® –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤ - –≤–∞—à–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "‚ùó *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç–∞–º:*\n"
            "- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ\n"
            "- –¢–µ–∫—Å—Ç –ø–æ –∂–µ–ª–∞–Ω–∏—é\n"
        )

        await message.answer(
            welcome_message,
            reply_markup=get_main_keyboard(message.from_user.id in ADMIN_IDS),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    try:
        help_message = (
            "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n"
            "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üìå *–†–∞–±–æ—Ç–∞ —Å –ø–æ—Å—Ç–∞–º–∏:*\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üì§ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç'\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n"
            "3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
            "üìå *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:*\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 'üì® –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π'"
        )

        await message.answer(
            help_message,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error in cmd_help: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É.")

@router.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: Message, state: FSMContext):
    try:
        await state.clear()
        user = Database.get_user(message.from_user.id)
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Convert Row to dict if needed
        if hasattr(user, '_asdict'):
            user = user._asdict()
        elif not isinstance(user, dict):
            user = dict(user)
            
        is_admin = user.get('role') == 'admin'
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard(is_admin)
        )
    except Exception as e:
        logger.error(f"Error in return_to_main_menu: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")
        
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """Admin command handler"""
    try:
        user = Database.get_user(message.from_user.id)
        if not user or (user.get('role') != 'admin' and message.from_user.id not in ADMIN_IDS):
            await message.answer(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        admin_help = (
            "üë®‚Äçüíª *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "üìù –ù–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã - –Ω–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
            "‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã - –ø—Ä–∏–Ω—è—Ç—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
            "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã - –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
            "üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )

        await message.answer(
            admin_help,
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(True)
        )
    except Exception as e:
        logger.error(f"Error in cmd_admin: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")

@router.message(Command("id"))
async def cmd_id(message: Message):
    """Show user ID"""
    try:
        await message.answer(
            f"üÜî –í–∞—à ID: `{message.from_user.id}`",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error in cmd_id: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID.")

# Error handler for unauthorized commands
@router.message(F.text.startswith('/admin'))
async def handle_admin_unauthorized(message: Message):
    """Block admin commands for regular users"""
    try:
        user = Database.get_user(message.from_user.id)
        if not user or (user.get('role') != 'admin' and message.from_user.id not in ADMIN_IDS):
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.",
                reply_markup=get_main_keyboard(False)
            )
    except Exception as e:
        logger.error(f"Error in handle_admin_unauthorized: {e}")