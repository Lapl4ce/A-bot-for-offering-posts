from aiogram.utils.keyboard import InlineKeyboardBuilder  # Add this import
from aiogram import Router, F, Bot
from aiogram.types import (
    Message, 
    CallbackQuery, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import Command  # Add this import
from aiogram.fsm.context import FSMContext

from states import UserManagement, Feedback, MassNotification
from database import Database
from keyboards import (
    get_admin_keyboard,
    get_post_actions_keyboard,
    get_user_profile_keyboard,
    get_feedback_response_keyboard,
    get_cancel_keyboard,
    get_cancelFeedback_keyboard,
    get_mass_notification_keyboard,
    get_cancel_Notify_keyboard,
    get_main_keyboard
)
from config import ADMIN_IDS
import logging
from utils import format_datetime

router = Router()
logger = logging.getLogger(__name__)

async def send_post_details(message: Message, post_id: int):
    """Send detailed post information with proper formatting"""
    try:
        post = Database.get_post_with_details(post_id)
        if not post:
            await message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # Prepare basic info
        response = (
            f"üìù <b>–î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞</b>\n\n"
            f"üÜî <b>ID:</b> {post['post_id']}\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> @{post['user_username'] or '–Ω–µ—Ç'} (ID: {post['user_telegram_id']})\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {format_datetime(post['created_at'])}\n"
            f"üîπ <b>–°—Ç–∞—Ç—É—Å:</b> {post['status']}\n"
        )

        # Add review info if available
        if post['reviewed_at']:
            response += f"üìÖ <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b> {format_datetime(post['reviewed_at'])}\n"
        if post['admin_username']:
            response += f"üë®‚Äçüíª <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> @{post['admin_username']}\n"
        if post['rejection_reason']:
            response += f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:</b> {post['rejection_reason']}\n"

        # Add text content (with proper escaping)
        post_text = post['text_content'] or "–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        response += f"\nüìÑ <b>–¢–µ–∫—Å—Ç:</b>\n<code>{escape_html(post_text[:1000])}</code>"

        # Send message with or without photo
        if post['image_file_id']:
            try:
                await message.answer_photo(
                    post['image_file_id'],
                    caption=response,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Error sending photo: {e}")
                await message.answer(
                    "üñº <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)\n\n" + response,
                    parse_mode="HTML"
                )
        else:
            await message.answer(
                "üñº <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n" + response,
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"Error in send_post_details: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞.")

@router.message(F.text.regexp(r'^/post \d+$'))
async def handle_post_view_request(message: Message):
    try:
        post_id = int(message.text.split(' ')[1])
        post = Database.get_post_with_details(post_id)
        
        if not post:
            await message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user = Database.get_user(message.from_user.id)
        if not user or user['role'] != 'admin':
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return
        # Convert Row to dict if needed
        if hasattr(post, '_asdict'):
            post = post._asdict()
        elif not isinstance(post, dict):
            post = dict(post)

        response = (
            f"üìù –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞:\n\n"
            f"üÜî ID: {post.get('post_id', 'N/A')}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: @{post.get('user_username', 'N/A')} (ID: {post.get('user_telegram_id', 'N/A')})\n"
            f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {post.get('created_at', 'N/A')}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: {post.get('status', 'N/A')}\n"
        )
        
        if post.get('reviewed_at'):
            response += f"üìÖ –î–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {post.get('reviewed_at')}\n"
        if post.get('admin_username'):
            response += f"üë®‚Äçüíª –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{post.get('admin_username')}\n"
        if post.get('rejection_reason') and post.get('status') == 'rejected':
            response += f"üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {post.get('rejection_reason')}\n"
            
        if post.get('image_file_id'):
            await message.answer_photo(
                post['image_file_id'],
                caption=response + f"\nüìù –¢–µ–∫—Å—Ç: {post.get('text_content', '–Ω–µ —É–∫–∞–∑–∞–Ω')}",
                reply_markup=get_post_actions_keyboard(post['post_id']) if post.get('status') == 'pending' else None
            )
        else:
            await message.answer(
                response + f"\nüìù –¢–µ–∫—Å—Ç: {post.get('text_content', '–Ω–µ —É–∫–∞–∑–∞–Ω')}",
                reply_markup=get_post_actions_keyboard(post['post_id']) if post.get('status') == 'pending' else None
            )

        # Return the admin keyboard after the post details
        await message.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /user ID", reply_markup=get_admin_keyboard())

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /post ID")
    except Exception as e:
        logger.error(f"Error in handle_post_view_request: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ—Å—Ç–∞")


async def show_pending_posts(message: Message, bot: Bot):
    """Show all pending posts for moderation"""
    try:
        posts = Database.get_posts_by_status('pending')
        if not posts:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
            return

        for post in posts:
            caption = (
                f"üÜî ID –ø–æ—Å—Ç–∞: {post['post_id']}\n"
                f"üë§ –ê–≤—Ç–æ—Ä: @{post['username']} (ID: {post['telegram_id']})\n"
                f"üìÖ –î–∞—Ç–∞: {format_datetime(post['created_at'])}\n"
                f"üìù –¢–µ–∫—Å—Ç: {post['text_content'] or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            )

            if post['image_file_id']:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=post['image_file_id'],
                    caption=caption,
                    reply_markup=get_post_actions_keyboard(post['post_id'])
                )
            else:
                await message.answer(
                    caption,
                    reply_markup=get_post_actions_keyboard(post['post_id'])
                )

        # Return the admin keyboard after showing pending posts
        await message.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /user ID", reply_markup=get_admin_keyboard())

    except Exception as e:
        logger.error(f"Error showing pending posts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤.")


# ======================
# ADMIN PANEL
# ======================

@router.message(F.text == "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    """Show admin panel"""
    try:
        user = Database.get_user(message.from_user.id)
        if not user or user['role'] != 'admin':
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        await message.answer(
            "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in admin_panel: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

# ======================
# USER MANAGEMENT
# ======================

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users_list(message: Message):
    """Show list of all users"""
    try:
        users = Database.get_all_users()
        if not users:
            await message.answer("‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        user = Database.get_user(message.from_user.id)
        if not user or user['role'] != 'admin':
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return
        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            status = "üî¥" if user['status'] == 'blocked' else "üü¢"
            role = "üëë" if user['role'] == 'admin' else "üë§"
            response += (
                f"{status}{role} ID: {user['internal_id']}\n"
                f"üë§ @{user['username'] or '–Ω–µ—Ç'}\n"
                f"üìÖ –†–µ–≥.: {format_datetime(user['created_at'])}\n"
                f"üìä –ü–æ—Å—Ç–æ–≤: {user['submitted_posts']} | "
                f"‚úÖ {user['approved_posts']} | ‚ùå {user['rejected_posts']}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
        
        await message.answer(
            response,
            reply_markup=ReplyKeyboardRemove()
        )
        await message.answer(
            "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /user [ID]\n"
            "–ü—Ä–∏–º–µ—Ä: /user 1",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in show_users_list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@router.message(Command("user"))
async def show_user_profile(message: Message):
    """Show detailed user profile"""
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /user [ID]")
            return
        user = Database.get_user(message.from_user.id)
        if not user or user['role'] != 'admin':
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
            
        user_id = int(args[1])
        user = Database.get_user_by_id(user_id)
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        status = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user['status'] == 'blocked' else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        role = "üëë –ê–¥–º–∏–Ω" if user['role'] == 'admin' else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        response = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            f"üÜî ID: {user['internal_id']}\n"
            f"üì± Telegram ID: {user['telegram_id']}\n"
            f"üë§ –ò–º—è: {user['full_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üîπ –ù–∏–∫: @{user['username'] or '–Ω–µ—Ç'}\n"
            f"üë• –†–æ–ª—å: {role}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {format_datetime(user['created_at'])}\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user['submitted_posts']}\n"
            f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {user['approved_posts']}\n"
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {user['rejected_posts']}"
        )
        
        await message.answer(
            response,
            reply_markup=get_user_profile_keyboard(
                user['internal_id'],
                user['status'] == 'blocked'
            )
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error in show_user_profile: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")

@router.callback_query(F.data.startswith("block_user:"))
async def block_user(callback: CallbackQuery, state: FSMContext):
    """Initiate user blocking"""
    try:
        user_id = int(callback.data.split(":")[1])
        await state.set_state(UserManagement.waiting_for_block_reason)
        await state.update_data(user_id=user_id)
        await callback.message.answer(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in block_user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

@router.message(UserManagement.waiting_for_block_reason)
async def process_block_reason(message: Message, state: FSMContext, bot: Bot):
    """Process user blocking"""
    try:
        if not message.text:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É")
            return
            
        data = await state.get_data()
        await state.clear()
        
        Database.block_user(
            user_id=data['user_id'],
            admin_id=message.from_user.id,
            reason=message.text
        )
        
        # Notify user
        user = Database.get_user_by_id(data['user_id'])
        if user:
            try:
                await bot.send_message(
                    chat_id=user['telegram_id'],
                    text=f"‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–ü—Ä–∏—á–∏–Ω–∞: {message.text}"
                )
            except Exception as e:
                logger.error(f"Failed to notify user: {e}")
        
        await message.answer(
            "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in process_block_reason: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

@router.callback_query(F.data.startswith("unblock_user:"))
async def unblock_user(callback: CallbackQuery, state: FSMContext):
    """Initiate user unblocking"""
    try:
        user_id = int(callback.data.split(":")[1])
        await state.set_state(UserManagement.waiting_for_unblock_reason)
        await state.update_data(user_id=user_id)
        await callback.message.answer(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in unblock_user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

@router.message(UserManagement.waiting_for_unblock_reason)
async def process_unblock_reason(message: Message, state: FSMContext, bot: Bot):
    """Process user unblocking"""
    try:
        if not message.text:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É")
            return
            
        data = await state.get_data()
        await state.clear()
        
        Database.unblock_user(
            user_id=data['user_id'],
            admin_id=message.from_user.id,
            reason=message.text
        )
        
        # Notify user
        user = Database.get_user_by_id(data['user_id'])
        if user:
            try:
                await bot.send_message(
                    chat_id=user['telegram_id'],
                    text=f"‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–ü—Ä–∏—á–∏–Ω–∞: {message.text}"
                )
            except Exception as e:
                logger.error(f"Failed to notify user: {e}")
        
        await message.answer(
            "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in process_unblock_reason: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

# ======================
# POST MODERATION
# ======================

@router.message(F.text == "üìù –ù–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã")
async def show_pending_posts(message: Message, bot: Bot):
    """Show all pending posts with moderation buttons"""
    try:
        posts = Database.get_posts_by_status('pending')
        if not posts:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
            return
        user = Database.get_user(message.from_user.id)
        if not user or user['role'] != 'admin':
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return
        for post in posts:
            caption = (
                f"üÜî ID –ø–æ—Å—Ç–∞: {post['post_id']}\n"
                f"üë§ –ê–≤—Ç–æ—Ä: @{post['username']} (ID: {post['telegram_id']})\n"
                f"üìÖ –î–∞—Ç–∞: {format_datetime(post['created_at'])}\n"
                f"üìù –¢–µ–∫—Å—Ç: {post['text_content'] or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            )

            if post['image_file_id']:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=post['image_file_id'],
                    caption=caption,
                    reply_markup=get_post_actions_keyboard(post['post_id'])
                )
            else:
                await message.answer(
                    caption,
                    reply_markup=get_post_actions_keyboard(post['post_id'])
                )
    except Exception as e:
        logger.error(f"Error showing pending posts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤.")

@router.message(F.text == "‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã")
async def show_approved_posts(message: Message):
    """Show approved posts"""
    user = Database.get_user(message.from_user.id)
    if not user or user['role'] != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=get_main_keyboard())
        return
    await show_posts_by_status(message, 'approved')
    await message.answer("\n–í–≤–µ–¥–∏—Ç–µ <b>/post ID</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /post 1)", reply_markup=get_admin_keyboard())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

@router.message(F.text == "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã")
async def show_rejected_posts(message: Message):
    """Show rejected posts"""
    user = Database.get_user(message.from_user.id)
    if not user or user['role'] != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=get_main_keyboard())
        return
    await show_posts_by_status(message, 'rejected')
    await message.answer("\n–í–≤–µ–¥–∏—Ç–µ <b>/post ID</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /post 1)", reply_markup=get_admin_keyboard())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

async def show_posts_by_status(message: Message, status: str):
    try:
        posts = Database.get_posts_by_status(status)
        if not posts:
            await message.answer(f"‚ÑπÔ∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
            return
            
        response = f"üìã <b>–ü–æ—Å—Ç—ã ({status}):</b>\n\n"
        for post in posts:
            response += (
                f"üÜî <b>post_{post['post_id']}</b>\n"
                f"üë§ @{post['username'] or '–Ω–µ—Ç'}\n"
                f"üìÖ {format_datetime(post['created_at'])}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
        
        await message.answer(
            response,
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error showing {status} posts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤")

@router.callback_query(F.data.startswith("approve_post:"))
async def approve_post(callback: CallbackQuery, bot: Bot):
    """Handle post approval"""
    try:
        post_id = int(callback.data.split(":")[1])
        Database.update_post_status(
            post_id=post_id,
            status='approved',
            admin_id=callback.from_user.id
        )

        # Notify user
        post = Database.get_post(post_id)
        if post:
            await notify_post_status(
                user_id=post['user_id'],
                post_id=post_id,
                status='approved',
                bot=bot
            )

        await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ message –≤ callback
        if callback.message:
            await callback.message.edit_reply_markup(reply_markup=None)
        else:
            logger.warning("callback.message is None")
    except Exception as e:
        logger.error(f"Error approving post: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")


@router.callback_query(F.data.startswith("reject_post:"))
async def reject_post(callback: CallbackQuery, state: FSMContext):
    """Initiate post rejection process"""
    post_id = int(callback.data.split(":")[1])
    await state.set_state(UserManagement.waiting_for_rejection_reason)
    await state.update_data(post_id=post_id)
    await callback.message.answer(
        "‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(UserManagement.waiting_for_rejection_reason)
async def complete_reject_post(message: Message, state: FSMContext, bot: Bot):
    """Complete post rejection with reason"""
    try:
        data = await state.get_data()
        await state.clear()
        
        Database.update_post_status(
            post_id=data['post_id'],
            status='rejected',
            admin_id=message.from_user.id,
            rejection_reason=message.text
        )
        
        # Notify user
        post = Database.get_post(data['post_id'])
        if post:
            await notify_post_status(
                user_id=post['user_id'],
                post_id=data['post_id'],
                status='rejected',
                bot=bot,
                reason=message.text
            )
        
        await message.answer(
            "‚úÖ –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error rejecting post: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
        
@router.message(UserManagement.waiting_for_rejection_reason)
async def process_rejection(message: Message, state: FSMContext, bot: Bot):
    """Complete post rejection with reason"""
    try:
        data = await state.get_data()
        await state.clear()
        
        post_id = data['post_id']
        Database.update_post_status(
            post_id=post_id,
            status='rejected',
            admin_id=message.from_user.id,
            rejection_reason=message.text
        )
        
        # Notify user
        post = Database.get_post(post_id)
        if post:
            await notify_post_status(
                user_id=post['user_id'],
                post_id=post_id,
                status='rejected',
                bot=bot,
                reason=message.text
            )
        
        await message.answer(
            "‚úÖ –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error rejecting post: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")

# Notification Utility
async def notify_post_status(user_id: int, post_id: int, status: str, bot: Bot, reason: str = None):
    """Notify user about their post status change"""
    try:
        user = Database.get_user_by_id(user_id)
        if not user:
            return
            
        post = Database.get_post(post_id)
        if not post:
            return

        status_text = {
            'approved': '–æ–¥–æ–±—Ä–µ–Ω ‚úÖ',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå'
        }.get(status, status)

        message = (
            f"‚ÑπÔ∏è *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω*\n\n"
            f"üÜî ID: {post_id}\n"
            f"üìÖ –î–∞—Ç–∞: {post['created_at']}\n"
            f"üîπ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}\n"
        )

        if post['reviewed_by']:
            admin = Database.get_user(post['reviewed_by'])
            if admin:
                message += f"üë®‚Äçüíª –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{admin['username']}\n"

        if status == 'rejected':
            message += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason or post.get('rejection_reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"

        await bot.send_message(
            chat_id=user['telegram_id'],
            text=message,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Failed to notify user about post status: {e}")

# ======================
# FEEDBACK MANAGEMENT
# ======================

@router.message(F.text == "üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def show_pending_feedback(message: Message):
    """Show pending feedback"""
    try:
        user = Database.get_user(message.from_user.id)
        if not user or user['role'] != 'admin':
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return
    
        feedback_list = Database.get_pending_feedback()
        if not feedback_list:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
        
        for feedback in feedback_list:
            response = (
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ #{feedback['feedback_id']}\n\n"
                f"üë§ –û—Ç: @{feedback['username']}\n"
                f"üìÖ –î–∞—Ç–∞: {format_datetime(feedback['created_at'])}\n\n"
                f"üìù –¢–µ–∫—Å—Ç:\n{feedback['message']}"
            )
            
            await message.answer(
                response,
                reply_markup=get_feedback_response_keyboard(feedback['feedback_id'])
            )
    except Exception as e:
        logger.error(f"Error in show_pending_feedback: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

@router.callback_query(F.data.startswith("respond_feedback:"))
async def respond_to_feedback(callback: CallbackQuery, state: FSMContext):
    """Initiate feedback response"""
    try:
        feedback_id = int(callback.data.split(":")[1])
        await state.set_state(Feedback.waiting_for_response)
        await state.update_data(feedback_id=feedback_id)
        await callback.message.answer(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in respond_to_feedback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞")

@router.message(Feedback.waiting_for_response)
async def process_feedback_response(message: Message, state: FSMContext, bot: Bot):
    """Process feedback response"""
    try:
        if not message.text:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
            return
            
        data = await state.get_data()
        await state.clear()
        
        feedback_id = data['feedback_id']
        Database.respond_to_feedback(
            feedback_id=feedback_id,
            admin_id=message.from_user.id,
            response=message.text
        )
        
        # Notify user
        await notify_user_about_feedback(feedback_id, message.text, bot)
        
        await message.answer(
            "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in process_feedback_response: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")

# ======================
# NOTIFICATION FUNCTIONS
# ======================

async def notify_user_about_post(post_id: int, status: str, bot: Bot):
    """Notify user about post status change"""
    try:
        post = Database.get_post(post_id)
        if not post:
            return
            
        user = Database.get_user_by_id(post['user_id'])
        if not user:
            return
            
        status_text = {
            'approved': '–æ–¥–æ–±—Ä–µ–Ω ‚úÖ',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå'
        }.get(status, status)
        
        message = (
            f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω:\n\n"
            f"üÜî ID: {post_id}\n"
            f"üìÖ –î–∞—Ç–∞: {format_datetime(post['created_at'])}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: {status_text}\n"
        )
        
        if post['reviewed_by']:
            admin = Database.get_user(post['reviewed_by'])
            if admin:
                message += f"üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{admin['username']}\n"
        
        await bot.send_message(
            chat_id=user['telegram_id'],
            text=message
        )
    except Exception as e:
        logger.error(f"Failed to notify user about post: {e}")

async def notify_user_about_feedback(feedback_id: int, response: str, bot: Bot):
    """Notify user about feedback response"""
    try:
        feedback = Database.get_feedback(feedback_id)
        if not feedback:
            return
            
        await bot.send_message(
            chat_id=feedback['telegram_id'],
            text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{response}"
        )
    except Exception as e:
        logger.error(f"Failed to notify user about feedback: {e}")

async def notify_post_status(user_id: int, post_id: int, status: str, bot: Bot, reason: str = None):
    """Notify user about their post status"""
    try:
        user = Database.get_user_by_id(user_id)
        if not user:
            return
            
        status_text = {
            'approved': '–æ–¥–æ–±—Ä–µ–Ω ‚úÖ',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå'
        }.get(status, status)

        message = (
            f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ #{post_id} –∏–∑–º–µ–Ω–µ–Ω:\n"
            f"üîπ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}\n"
        )
        
        if status == 'rejected' and reason:
            message += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        
        await bot.send_message(
            chat_id=user['telegram_id'],
            text=message
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id}: {e}")


@router.message(F.text == "üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def start_mass_notification(message: Message, state: FSMContext):
    user = Database.get_user(message.from_user.id)
    if not user or user['role'] != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await state.set_state(MassNotification.waiting_for_content)
    await message.answer(
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå –û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞",
        reply_markup=get_cancel_Notify_keyboard()
    )

@router.message(MassNotification.waiting_for_content)
async def process_notification_content(message: Message, state: FSMContext):
    if not message.text and not message.photo:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")
        return
    
    content = {
        'text': message.text if message.text else None,
        'image': message.photo[-1].file_id if message.photo else None
    }
    
    await state.update_data(content=content)
    await state.set_state(MassNotification.confirm_sending)
    
    # Create preview
    preview_text = "üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
    if content['text']:
        preview_text += f"üìù –¢–µ–∫—Å—Ç:\n{content['text']}\n\n"
    if content['image']:
        preview_text += "üñº –ü—Ä–∏–ª–æ–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
    
    preview_text += "\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"
    
    if content['image']:
        await message.answer_photo(
            content['image'],
            caption=preview_text,
            reply_markup=get_mass_notification_keyboard()
        )
    else:
        await message.answer(
            preview_text,
            reply_markup=get_mass_notification_keyboard()
        )

@router.message(MassNotification.confirm_sending, F.text == "‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
async def confirm_mass_notification(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await state.clear()
    
    users = Database.get_all_users()
    total_users = len(users)
    success_count = 0
    fail_count = 0
    
    await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    for user in users:
        try:
            # Prefix text with "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            message_text = f"üö®üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{data['content']['text']}" if data['content']['text'] else "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            
            # Check if image exists and send accordingly
            if data['content']['image']:
                await bot.send_photo(
                    chat_id=user['telegram_id'],
                    photo=data['content']['image'],
                    caption=message_text
                )
            else:
                await bot.send_message(
                    chat_id=user['telegram_id'],
                    text=message_text
                )
            success_count += 1
        except Exception as e:
            logger.error(f"Failed to send to {user['telegram_id']}: {e}")
            fail_count += 1
            continue
    
    # Send statistics
    stats_message = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {round((success_count/total_users)*100 if total_users > 0 else 0)}%"
    )
    
    await message.answer(
        stats_message,
        reply_markup=get_admin_keyboard()
    )

@router.message(MassNotification.confirm_sending, F.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_mass_notification(message: Message, state: FSMContext):
    user = Database.get_user(message.from_user.id)
    if not user or user['role'] != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await state.clear()
    await message.answer(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_admin_keyboard()
    )
