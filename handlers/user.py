from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from datetime import datetime

from states import PostCreation, Feedback
from database import Database
from keyboards import (
    get_main_keyboard,
    get_cancel_keyboard,
    get_statistics_keyboard,
    get_cancelFeedback_keyboard
)
from config import ADMIN_IDS
from utils import format_datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder  # Add this import

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_post_creation(message: Message, state: FSMContext):
    await state.clear()
    user = Database.get_user(message.from_user.id)
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard(user and user.get('role') == 'admin')
    )
    
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_post_creation(message: Message, state: FSMContext):
    await state.clear()
    user = Database.get_user(message.from_user.id)
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard(user and user.get('role') == 'admin')
    )
    

@router.message(F.text == "‚ùå –ù–∞–∑–∞–¥")
async def cancel_feedback_creation(message: Message, state: FSMContext):
    await state.clear()
    user = Database.get_user(message.from_user.id)
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard(user and user.get('role') == 'admin')
    )
@router.message(F.text == "üì§ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç")
async def start_post_creation(message: Message, state: FSMContext):
    """Handle post creation initiation"""
    try:
        user = Database.get_user(message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
            
        # Fixed: Access Row object properly
        if user['status'] == 'blocked':
            await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã.")
            return

        await state.set_state(PostCreation.waiting_for_text)
        await message.answer(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –ø–æ—Å—Ç—É - –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–æ—á–∫—É.):\n"
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in start_post_creation: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(PostCreation.waiting_for_text)
async def process_post_text(message: Message, state: FSMContext):
    """Process post text and request image"""
    try:
        text = message.text if message.text and message.text.strip() else None
        await state.update_data(text=text)
        await state.set_state(PostCreation.waiting_for_image)
        
        await message.answer(
            "üñº –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error in process_post_text: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞.")
        await state.clear()


@router.message(PostCreation.waiting_for_image, F.photo)
async def process_post_image(message: Message, state: FSMContext, bot: Bot):
    """Process post with image"""
    try:
        # Get data from state
        data = await state.get_data()
        text = data.get('text') if 'text' in data else None
        await state.clear()
        
        # Get user info
        user = Database.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Check if user is blocked (access Row object properly)
        if user['status'] == 'blocked':
            await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã.")
            return

        # Create post (using the highest resolution photo)
        post_id = Database.create_post(
            user_id=user['internal_id'],
            text=text,
            image_file_id=message.photo[-1].file_id
        )
        
        # Notify admins
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"üì® –ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
                         f"ID: {post_id}\n"
                         f"–û—Ç: @{user['username'] or user['full_name']}\n"
                         f"–¢–µ–∫—Å—Ç: {text[:100] if text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")

        await message.answer(
            "‚úÖ –í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
            reply_markup=get_main_keyboard(user['role'] == 'admin')
        )
        
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logger.error(f"Error in process_post_image: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
        await state.clear()
            
@router.message(PostCreation.waiting_for_image)
async def process_invalid_image(message: Message):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.",
        reply_markup=get_cancel_keyboard()
    )


# [Rest of your handlers...]


# ======================
# FEEDBACK SYSTEM
# ======================

@router.message(F.text == "üì® –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
async def start_feedback(message: Message, state: FSMContext):
    """Initiate feedback process"""
    try:
        if message.text == "/cancel":
            await state.clear()
            await message.answer("‚úÖ –û—Ç–º–µ–Ω–∞. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
            return

        user = Database.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
        
        if user['status'] == 'blocked':
            await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        await state.set_state(Feedback.waiting_for_message)
        await message.answer(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
            "‚ÑπÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel",
            reply_markup=get_cancelFeedback_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in start_feedback: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@router.message(Feedback.waiting_for_message)
async def process_feedback_message(message: Message, state: FSMContext, bot: Bot):
    """Process user feedback and notify admins"""
    try:
        await state.clear()
        user = Database.get_user(message.from_user.id)
        feedback_id = Database.create_feedback(
            user_id=user['internal_id'],
            message=message.text
        )
        
        # Notify all admins
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
                         f"üÜî ID: {feedback_id}\n"
                         f"üë§ –û—Ç: @{user['username'] or user['full_name']}\n"
                         f"üìÖ –í—Ä–µ–º—è: {format_datetime(datetime.now())}\n\n"
                         f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text[:300]}..."
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")

        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard(user['role'] == 'admin')
        )
    except Exception as e:
        logger.error(f"Error in process_feedback_message: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

# ======================
# POST HISTORY
# ======================

@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –ø–æ—Å—Ç–æ–≤")
async def show_user_posts(message: Message):
    """Display user's post history"""
    try:
        user = Database.get_user(message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
            
        posts = Database.get_user_posts(user['internal_id'])
        if not posts:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return

        response = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤:\n\n"
        for post in posts:
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ', 
                'rejected': '‚ùå'
            }.get(post['status'], '‚ùì')
            
            # Use direct dictionary access for sqlite3.Row
            created_at = format_datetime(post['created_at']) if 'created_at' in post else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text_content = post['text_content'][:50] if post['text_content'] else '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'
            
            response += (
                f"{status_emoji} ID {post['post_id']} - {post['status']}\n"
                f"üìÖ {created_at}\n"
                f"üìù {text_content}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        await message.answer(response)
    except Exception as e:
        logger.error(f"Error in show_user_posts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤.")
# ======================
# STATISTICS
# ======================

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics_menu(message: Message):
    """Show statistics menu"""
    try:
        await message.answer(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_statistics_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in show_statistics_menu: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.callback_query(F.data == "top_approved")
async def show_top_approved_posts(callback: CallbackQuery):
    """Show top users by approved posts"""
    try:
        top_users = Database.get_top_users('approved_posts')
        if not top_users:
            await callback.answer("üòï –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        response = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–º:\n\n"
        for idx, user in enumerate(top_users, 1):
            response += f"{idx}. @{user['username']} - {user['approved_posts']} –ø–æ—Å—Ç(–æ–≤)\n"

        await callback.message.edit_text(response)
    except Exception as e:
        logger.error(f"Error in show_top_approved_posts: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == "top_rejected")
async def show_top_rejected_posts(callback: CallbackQuery):
    """Show top users by rejected posts"""
    try:
        top_users = Database.get_top_users('rejected_posts')
        if not top_users:
            await callback.answer("üòï –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        response = "üí¢ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–º:\n\n"
        for idx, user in enumerate(top_users, 1):
            response += f"{idx}. @{user['username']} - {user['rejected_posts']} –ø–æ—Å—Ç(–æ–≤)\n"

        await callback.message.edit_text(response)
    except Exception as e:
        logger.error(f"Error in show_top_rejected_posts: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# ======================
# NOTIFICATION SYSTEM
# ======================
async def notify_post_status(user_id: int, post_id: int, status: str, bot: Bot, reason: str = None):
    """Notify user about post status change"""
    try:
        user = Database.get_user_by_id(user_id)
        if not user:
            return
            
        post = Database.get_post(post_id)
        if not post:
            return

        status_text = {
            'approved': '–æ–¥–æ–±—Ä–µ–Ω ‚úÖ',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå'
        }.get(status, status)

        message = (
            f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω:\n\n"
            f"üÜî ID: {post_id}\n"
            f"üìÖ –î–∞—Ç–∞: {format_datetime(post['created_at'])}\n"
            f"üîπ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}\n"
        )

        if post['reviewed_by']:
            admin = Database.get_user(post['reviewed_by'])
            if admin:
                message += f"üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{admin['username']}\n"

        if status == 'rejected' and reason:
            message += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"

        await bot.send_message(
            chat_id=user['telegram_id'],
            text=message
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id}: {e}")
        
async def notify_feedback_response(feedback_id: int, response_text: str, bot: Bot):
    """Notify user about admin response to feedback"""
    try:
        feedback = Database.get_feedback(feedback_id)
        if not feedback:
            return

        await bot.send_message(
            chat_id=feedback['telegram_id'],
            text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{response_text}"
        )
    except Exception as e:
        logger.error(f"Failed to notify user about feedback response: {e}")